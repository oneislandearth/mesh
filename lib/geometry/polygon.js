"use strict";exports.__esModule=true;exports.Polygon=void 0;var _math=require("../utils/math");var _plane=require("./plane");var _point=require("./point");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Polygon");class Polygon extends Array{constructor(points){const equals=points=>points.length>2;validate({points,equals,expects:`"points" to contain at least three points`});for(const point of points){validate({point,Point:_point.Point,expects:`"points" to be an array of Point instances`})}super(...points)}get plane(){return _plane.Plane.fromPolygon(this)}get normal(){return this.plane.normal}get area(){return(0,_math.abs)(this.signedArea)}signedArea(normal){let sum=[0,0,0];for(const i in this){const pi=this[i];const pn=this[(i+1)%this.length];sum=(0,_math.add)(sum,(0,_math.cross)(pi,pn))}return(0,_math.divide)((0,_math.dot)(normal?normal:this.plane.normal,sum),2)}get clockwise(){if(this.signedArea()>=0)return true;return false}get coplaner(){for(const point of this){if(!this.plane.containsPoint(point))return false}return true}flip(){this.plane.flip()}containsPoint(point){return false}}exports.Polygon=Polygon;