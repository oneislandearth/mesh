{"version":3,"sources":["../../../src/geometry/utils/direction.js"],"names":["validate","Validator","Direction","Vector","constructor","x","y","z","species","center","right","left","up","down","forwards","backwards","fromAxis","axis","String","toLowerCase","axies","indexOf","TypeError","direction","Symbol","Array"],"mappings":"8DACA,qCAGA,iCAGA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,WAAd,CAArB,CAGO,KAAMC,CAAAA,SAAN,QAAwBC,eAAO,CAGpCC,WAAW,CAAC,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAD,CAAY,CAGrBP,QAAQ,CAAC,CAAEK,CAAF,CAAKC,CAAL,CAAQC,CAAR,CAAD,CAAc,QAAd,CAAR,CAGA,CAACF,CAAD,CAAIC,CAAJ,CAAOC,CAAP,EAAY,eAAK,CAACF,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAL,CAAZ,CAGA,MAAM,CAACF,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAN,CACD,CAGD,GAAIC,CAAAA,OAAJ,EAAc,CAGZ,MAAO,WACR,CAGD,MAAOC,CAAAA,MAAP,EAAgB,CAGd,MAAO,IAAIP,CAAAA,SAAJ,CAAc,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAd,CACR,CAGD,MAAOQ,CAAAA,KAAP,EAAe,CAGb,MAAO,IAAIR,CAAAA,SAAJ,CAAc,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAd,CACR,CAGD,MAAOS,CAAAA,IAAP,EAAc,CAGZ,MAAO,IAAIT,CAAAA,SAAJ,CAAc,CAAC,CAAC,CAAF,CAAK,CAAL,CAAQ,CAAR,CAAd,CACR,CAGD,MAAOU,CAAAA,EAAP,EAAY,CAGV,MAAO,IAAIV,CAAAA,SAAJ,CAAc,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAd,CACR,CAGD,MAAOW,CAAAA,IAAP,EAAc,CAGZ,MAAO,IAAIX,CAAAA,SAAJ,CAAc,CAAC,CAAD,CAAI,CAAC,CAAL,CAAQ,CAAR,CAAd,CACR,CAGD,MAAOY,CAAAA,QAAP,EAAkB,CAGhB,MAAO,IAAIZ,CAAAA,SAAJ,CAAc,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAd,CACR,CAGD,MAAOa,CAAAA,SAAP,EAAmB,CAGjB,MAAO,IAAIb,CAAAA,SAAJ,CAAc,CAAC,CAAC,CAAF,CAAK,CAAL,CAAQ,CAAR,CAAd,CACR,CAGD,MAAOc,CAAAA,QAAP,CAAgBC,IAAhB,CAAsB,CAGpBA,IAAI,CAAGC,MAAM,CAACD,IAAD,CAAN,CAAaE,WAAb,EAAP,CAGA,KAAMC,CAAAA,KAAK,CAAG,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAd,CAGA,GAAIA,KAAK,CAACC,OAAN,CAAcJ,IAAd,GAAuB,CAAC,CAA5B,CAA+B,KAAM,IAAIK,CAAAA,SAAJ,CAAc,mEAAd,CAAN,CAG/B,KAAMC,CAAAA,SAAS,CAAG,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAlB,CAGAA,SAAS,CAACH,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAD,CAAT,CAAiC,CAAjC,CAGA,MAAO,IAAIf,CAAAA,SAAJ,CAAcqB,SAAd,CACR,CAGD,WAAYC,MAAM,CAAChB,OAAnB,GAA8B,CAC5B,MAAOiB,CAAAA,KACR,CAhGmC,C","sourcesContent":["// Import the required math functions\nimport { unit } from '@oneisland/math';\n\n// Import the Vector class\nimport { Vector } from 'geometry/vector';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Direction');\n\n// Define a class Direction which defines a vector within a vector field\nexport class Direction extends Vector {\n\n  // Bind the x, y and z coordinates\n  constructor([x, y, z]) {\n\n    // Throw an error if the x, y or z value is not a Number\n    validate({ x, y, z }, 'Number');\n\n    // Apply the unitizing function\n    [x, y, z] = unit([x, y, z]);\n\n    // Call the super function to bind our coodinates to the array\n    super([x, y, z]);\n  }\n\n  // Define the species\n  get species() {\n    \n    // Define the species as 'Direction'\n    return 'Direction';\n  }\n\n  // Create a new Direction pointing towards the center\n  static center() {\n\n    // Return a Direction pointing towards the center\n    return new Direction([0, 0, 0]);\n  }\n\n  // Create a new Direction pointing towards the right\n  static right() {\n\n    // Return a Direction pointing towards the right\n    return new Direction([1, 0, 0]);\n  }\n\n  // Create a new Direction pointing towards the left\n  static left() {\n\n    // Return a Direction pointing towards the left\n    return new Direction([-1, 0, 0]);\n  }\n\n  // Create a new Direction pointing towards the sky\n  static up() {\n\n    // Return a Direction pointing towards the sky\n    return new Direction([0, 1, 0]);\n  }\n\n  // Create a new Direction pointing towards the ground\n  static down() {\n\n    // Return a Direction pointing towards the ground\n    return new Direction([0, -1, 0]);\n  }\n\n  // Create a new Direction pointing forwards\n  static forwards() {\n\n    // Return a Direction pointing forwards\n    return new Direction([1, 0, 0]);\n  }\n\n  // Create a new Direction pointing backwards\n  static backwards() {\n\n    // Return a Direction pointing backwards\n    return new Direction([-1, 0, 0]);\n  }\n\n  // Create a new Direction from an axis\n  static fromAxis(axis) {\n\n    // Cast the axis to lowercase\n    axis = String(axis).toLowerCase();\n\n    // Define the axies\n    const axies = ['x', 'y', 'z'];\n\n    // Throw an error if the axis is not x, y or z\n    if (axies.indexOf(axis) == -1) throw new TypeError('Direction.fromAxis expects \"axis\" to be a \"x\", \"y\" or \"z\"');\n\n    // Define the default values [x, y, z]\n    const direction = [0, 0, 0];\n\n    // Set the axis value to one\n    direction[axies.indexOf(axis)] = 1;\n\n    // Return a Direction pointing towards the axis\n    return new Direction(direction);\n  }\n\n  // Define the species to be an array\n  static get [Symbol.species]() {\n    return Array; \n  }\n}"],"file":"direction.js"}