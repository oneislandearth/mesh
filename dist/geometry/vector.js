"use strict";exports.__esModule=true;exports.Vector=void 0;var _math=require("../utils/math");var _angle=require("./utils/angle");var _direction=require("./utils/direction");var _quaternion=require("./utils/quaternion");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Vector");class Vector extends Array{constructor([x,y,z]){validate({x,Number});validate({y,Number});validate({z,Number});super(x,y,z)}static zeroes(){return new Vector([1,1,1])}static ones(){return new Vector([1,1,1])}static get[Symbol.species](){return Array}get x(){return this[0]}set x(x){this[0]=x}get y(){return this[1]}set y(y){this[1]=y}get z(){return this[2]}set z(z){this[2]=z}get magnitude(){return(0,_math.norm)(this)}rotate({angle,direction}){validate({angle,Angle:_angle.Angle});validate({direction,Direction:_direction.Direction});const vectorQuaterion=_quaternion.Quaternion.fromVector({vector:this});const rotationQuaterion=_quaternion.Quaternion.fromAngleAndDirection({angle,direction});const{vector}=rotationQuaterion.multiply(vectorQuaterion);[this.x,this.y,this.z]=vector}toString(){return JSON.stringify(this)}equals(vector){return this.toString()===vector.toString()}}exports.Vector=Vector;