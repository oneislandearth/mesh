{"version":3,"sources":["../../src/geometry/vector.js"],"names":["validate","Validator","Vector","Array","constructor","x","y","z","species","Symbol","zeroes","ones","magnitude","quaternion","Quaternion","scalar","vector","rotate","angle","direction","rotationQuaterion","fromAngleAndDirection","rotateInPlace","update","clone","toString","JSON","stringify","equals"],"mappings":"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","sourcesContent":["// Import the required math functions\nimport { norm } from '@oneisland/math';\n\n// Import the required geometry utilities\nimport { Quaternion } from 'geometry/index';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Vector');\n\n// Define a class vertex which is an array of 3D coodinates\nexport class Vector extends Array {\n\n  // Create a Vector from the x, y and z\n  constructor([x, y, z]) {\n\n    // Throw an error if the x, y or z value is not a Number\n    validate({ x, y, z }, 'Number');\n\n    // Call the super function to bind x, y, and z to the array\n    super(x, y, z);\n  }\n\n  // Define the species\n  get species() {\n\n    // Define the species as 'Vector'\n    return 'Vector';\n  }\n\n  // Define the species to be an array\n  static get [Symbol.species]() {\n    return Array; \n  }\n\n  // Define a zeroes helper function\n  static zeroes() {\n\n    // Return a Vector with 0, 0, 0\n    return new Vector([1, 1, 1]);\n  }\n\n  // Define a ones helper function\n  static ones() {\n\n    // Return a Vector with 1, 1, 1\n    return new Vector([1, 1, 1]);\n  }\n\n  // Determine the x value of the vector\n  get x() {\n    return this[0];\n  }\n\n  // Update the x value of the vector\n  set x(x) {\n    this[0] = x;\n  }\n\n  // Determine the y value of the vector\n  get y() {\n    return this[1];\n  }\n\n  // Update the y value of the vector\n  set y(y) {\n    this[1] = y;\n  }\n\n  // Determine the z value of the vector\n  get z() {\n    return this[2];\n  }\n\n  // Update the z value of the vector\n  set z(z) {\n    this[2] = z;\n  }\n\n  // Determine the euclidean norm of the vector\n  get magnitude() {\n    return norm(this);\n  }\n\n  // Cast the vector to a quaternion\n  get quaternion() {\n    return new Quaternion({ scalar: 0, vector: this });\n  }\n\n  // Rotate the vector by an angle and direction\n  rotate({ angle, direction }) {\n\n    // Throw an error if the angle is not an Angle\n    validate({ angle }, 'Angle');\n\n    // Throw an error if the direction is not a Direction\n    validate({ direction }, 'Direction');\n\n    // Create a Quaternion from the angle and direction\n    const rotationQuaterion = Quaternion.fromAngleAndDirection({ angle, direction });\n\n    // Rotate the vector\n    const { vector } = this.quaternion.rotate(rotationQuaterion);\n\n    // Return the rotated vector\n    return new Vector(vector);\n  }\n\n  // Rotate the vector by an angle and direction (in place)\n  rotateInPlace({ angle, direction }) {\n\n    // Throw an error if the angle is not an Angle\n    validate({ angle }, 'Angle');\n\n    // Throw an error if the direction is not a Direction\n    validate({ direction }, 'Direction');\n\n    // Rotate the vector by the angle and direction\n    const vector = this.rotate({ angle, direction });\n\n    // Update the vector with the rotated vector\n    this.update(vector);\n  }\n\n  // Update the vertices on a vector\n  update([x, y, z]) {\n\n    // Throw an error if x, y, or z is not a Number\n    validate({ x, y, z }, 'Number');\n  \n    // Update the vector\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n\n    // Return the vector\n    return this;\n  }\n\n  // Clone a vector\n  clone() {\n\n    // Return the cloned vector\n    return new Vector(this);\n  }\n\n  // Cast the vector to a string\n  toString() {\n    \n    // Return the stringified vector\n    return JSON.stringify(this);\n  }\n  \n  // Evaluate if two vectors are the same\n  equals(vector) {\n  \n    // Check that the vectors equal the same value\n    return (this.toString() === vector.toString());\n  }\n\n}"],"file":"vector.js"}