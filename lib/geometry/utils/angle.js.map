{"version":3,"sources":["../../../src/geometry/utils/angle.js"],"names":["validate","Validator","Angle","constructor","angle","re","species","eval","string","exec","a","Number","indexOf","rightAngle","Symbol","toPrimitive","type","degrees","toFixed","radians"],"mappings":"0DACA,qCAGA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,OAAd,CAArB,CAGO,KAAMC,CAAAA,KAAM,CAGjBC,WAAW,CAACC,KAAK,CAAG,CAAT,CAAY,CAGrBA,KAAK,CAAKA,KAAK,CAACC,EAAP,CAAaD,KAAK,CAACC,EAAnB,CAAwBD,KAAjC,CAGA,GAAIA,KAAK,CAACA,KAAV,CAAiBA,KAAK,CAAGA,KAAR,CAGjBJ,QAAQ,CAAC,CAAEI,KAAF,CAAD,CAAY,QAAZ,CAAR,CAGA,KAAKA,KAAL,CAAaA,KACd,CAGD,GAAIE,CAAAA,OAAJ,EAAc,CAGZ,MAAO,OACR,CAGD,MAAOC,CAAAA,IAAP,CAAYC,MAAZ,CAAoB,CAGlB,GAAI,CAACJ,KAAD,EAAW,oCAAD,CAAuCK,IAAvC,CAA4CD,MAA5C,CAAd,CAGAR,QAAQ,CAAC,CAAEI,KAAF,CAAD,CAAaM,CAAD,EAAOA,CAAnB,CAAsB,mDAAtB,CAAR,CAGAN,KAAK,CAAGO,MAAM,CAACP,KAAD,CAAd,CAGA,GAAII,MAAM,CAACI,OAAP,CAAe,KAAf,EAAwB,CAAC,CAAzB,EAA8BJ,MAAM,CAACI,OAAP,CAAe,MAAf,EAAsB,CAAC,CAAzD,CAA4D,CAG1DR,KAAK,CAAG,kBAAQA,KAAR,CACT,CAGD,MAAO,IAAIF,CAAAA,KAAJ,CAAUE,KAAV,CACR,CAGD,MAAOS,CAAAA,UAAP,EAAoB,CAGlB,MAAOX,CAAAA,KAAK,CAACK,IAAN,CAAW,QAAX,CACR,CAGD,CAACO,MAAM,CAACC,WAAR,EAAqBC,IAArB,CAA2B,CAGzB,GAAIA,IAAI,EAAI,QAAZ,CAAsB,MAAQ,GAAEL,MAAM,CAAC,KAAKM,OAAL,CAAaC,OAAb,CAAqB,CAArB,CAAD,CAA0B,GAA1C,CAGtB,MAAOP,CAAAA,MAAM,CAAC,KAAKQ,OAAN,CACd,CAGD,GAAIA,CAAAA,OAAJ,EAAc,CAGZ,MAAO,MAAKf,KACb,CAGD,GAAIe,CAAAA,OAAJ,CAAYf,KAAZ,CAAmB,CAGjBJ,QAAQ,CAAC,CAAEI,KAAF,CAAD,CAAY,QAAZ,CAAR,CAGA,KAAKA,KAAL,CAAaA,KACd,CAGD,GAAIa,CAAAA,OAAJ,EAAc,CAGZ,MAAO,kBAAQ,KAAKE,OAAb,CACR,CAGD,GAAIF,CAAAA,OAAJ,CAAYb,KAAZ,CAAmB,CAGjBJ,QAAQ,CAAC,CAAEI,KAAF,CAAD,CAAY,QAAZ,CAAR,CAGA,KAAKe,OAAL,CAAe,kBAAQf,KAAR,CAChB,CAjGgB,C","sourcesContent":["// Import the required math functions\nimport { radians, degrees } from '@oneisland/math';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Angle');\n\n// Define a class Angle which describes an angle\nexport class Angle {\n\n  // Bind the angle in radians\n  constructor(angle = 0) {\n\n    // Check whether the angle is complex number, and select the value in radians\n    angle = ((angle.re) ? angle.re : angle);\n\n    // If the angle is an angle extract the angle\n    if (angle.angle) angle = angle;\n\n    // Throw an error if the angle is not a Number\n    validate({ angle }, 'Number');\n\n    // Bind the angle in radians\n    this.angle = angle;\n  }\n\n  // Define the species\n  get species() {\n    \n    // Define the species as 'Angle'\n    return 'Angle';\n  }\n\n  // Create an angle from a string (e.g. 180deg)\n  static eval(string) {\n\n    // Extract the number from the string\n    let [angle] = (/(([\\d]*\\.*[\\d]+)||([\\d]+\\.*[\\d]*))/).exec(string);\n\n    // Throw an error if the angle string does not contain a number\n    validate({ angle }, (a) => a, '\"string\" to contain digits within in the string');\n\n    // Cast the angle to a number\n    angle = Number(angle);\n\n    // Check if the angle is degrees\n    if (string.indexOf('deg') > -1 || string.indexOf('°') > -1) {\n\n      // Convert the angle to radians\n      angle = radians(angle);\n    }\n\n    // Return the new Angle\n    return new Angle(angle);\n  }\n\n  // Create a right angle\n  static rightAngle() {\n\n    // Return the right angle\n    return Angle.eval('90 deg');\n  }\n\n  // Cast the radians to a number primitive\n  [Symbol.toPrimitive](type) {\n\n    // Cast the number to a string and return the angle in degrees\n    if (type == 'string') return `${Number(this.degrees.toFixed(2))}°`;\n    \n    // Cast the number to a number\n    return Number(this.radians);\n  } \n\n  // Determine the angle in degrees\n  get radians() {\n\n    // Return the angle in degrees\n    return this.angle;\n  }\n\n  // Update the angle from radians\n  set radians(angle) {\n\n    // Throw an error if the angle is not a Number\n    validate({ angle }, 'Number');\n  \n    // Bind the angle in radians\n    this.angle = angle;\n  }\n\n  // Determine the angle in degrees\n  get degrees() {\n\n    // Return the angle in degrees\n    return degrees(this.radians);\n  }\n\n  // Update the angle from degrees\n  set degrees(angle) {\n\n    // Throw an error if the angle is not a Number\n    validate({ angle }, 'Number');\n\n    // Bind the angle in degrees\n    this.radians = radians(angle);\n  }\n}"],"file":"angle.js"}