"use strict";exports.__esModule=true;exports.Plane=void 0;var _math=require("../utils/math");var _line=require("./line");const PlaneTolerance=1e-4;class Plane{constructor({normal,scalar}){this.normal=normal;this.scalar=scalar}static fromFace([a,b,c]){const normal=new Vector((0,_math.unit)((0,_math.cross)((0,_math.minus)(b,a),(0,_math.minus)(c,a))));const scalar=(0,_math.dot)(normal,a);return new Plane({normal,scalar})}scale(distance){this.scalar=(0,_math.add)(this.scalar,distance)}lineOfIntersectionWith(plane){if(!(plane instanceof Plane))throw new TypeError("Plane.intersectionLineWith expects \"plane\" to be a Plane");const[n1,s1]=[this.normal,this.scalar];const[n2,s2]=[plane.normal,plane.scalar];const direction=(0,_math.cross)(n1,n2);if(direction==0)return;const c1=(0,_math.divide)((0,_math.subtract)(s1,(0,_math.multiply)(s2,(0,_math.dot)(n1,n2))),(0,_math.subtract)(1,(0,_math.multiply)((0,_math.dot)(n1,n2),(0,_math.dot)(n1,n2))));const c2=(0,_math.divide)((0,_math.subtract)(s2,(0,_math.multiply)(s1,(0,_math.dot)(n1,n2))),(0,_math.subtract)(1,(0,_math.multiply)((0,_math.dot)(n1,n2),(0,_math.dot)(n1,n2))));const point=(0,_math.add)((0,_math.multiply)(c1,n1),(0,_math.multiply)(c2,n2));return new _line.Line({point,direction})}}exports.Plane=Plane;