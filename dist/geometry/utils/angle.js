"use strict";exports.__esModule=true;exports.Angle=void 0;var _math=require("../../utils/math");var _validator=require("../../utils/validator");const{validate}=new _validator.Validator("Angle");class Angle{constructor(angle=0){angle=angle.re?angle.re:angle;validate({angle,Number});this.angle=angle}static eval(string){let[angle]=/(([\d]*\.*[\d]+)||([\d]+\.*[\d]*))/.exec(string);validate({angle,expects:"\"string\" to contain digits within in the string"});angle=Number(angle);if(string.indexOf("deg")>-1||string.indexOf("\xB0")>-1){angle=(0,_math.radians)(angle)}return new Angle(angle)}static rightAngle(){return Angle.eval("90 deg")}static get[Symbol.species](){return Number}[Symbol.toPrimitive](){return Number(this.radians)}get radians(){return this.angle}set radians(angle){console.log("value is",angle);validate({angle,Number});this.angle=angle}get degrees(){return(0,_math.degrees)(this.radians)}set degrees(angle){validate({angle,Number});this.radians=(0,_math.radians)(angle)}toString(){return`${this.degrees}Â°`}}exports.Angle=Angle;