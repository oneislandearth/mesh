"use strict";exports.__esModule=true;exports.Line=void 0;var _math=require("../utils/math");var _line=require("./line");var _direction=require("./utils/direction");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Line");class Line{constructor({point,direction}){validate({point,Point:_line.Point});validate({direction,Direction:_direction.Direction});this.point=point;this.direction=direction}pointFromDistance(distance){validate({distance,Number});const point=(0,_math.add)(this.point,(0,_math.multiply)(distance,this.direction));return new _line.Point(point)}lineFromDistance(distance){validate({distance,Number});return new Line({point:this.pointFromDistance(distance),direction:this.direction})}pointOfIntersectionWith(line){validate({line,Line});if((0,_math.cross)(line.direction,(0,_math.subtract)(this.point,line.point))||(0,_math.cross)(line.direction,this.direction))return null;const distance=(0,_math.multiply)((0,_math.divide)((0,_math.cross)(line.direction,(0,_math.subtract)(this.point,line.point)),(0,_math.cross)(line.direction,this.direction)),this.direction);const front=(0,_math.dot)((0,_math.cross)(line.direction,(0,_math.subtract)(line.direction,line.point)),(0,_math.cross)(line.direction,this.direction))>0;const intersection=front?(0,_math.add)(this.point,distance):(0,_math.subtract)(this.point,distance);return new _line.Point(intersection)}}exports.Line=Line;