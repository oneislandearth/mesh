"use strict";exports.__esModule=true;exports.Point=void 0;var _math=require("../utils/math");var _vector=require("./vector");var _angle=require("./utils/angle");var _direction=require("./utils/direction");var _quaternion=require("./utils/quaternion");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Point");class Point extends _vector.Vector{constructor([x,y,z]){validate({x,Number});validate({y,Number});validate({z,Number});super([x,y,z])}static get[Symbol.species](){return Array}rotate({angle,direction}){validate({angle,Angle:_angle.Angle});validate({direction,Direction:_direction.Direction});let vector=this.toVector();const vectorQuaterion=_quaternion.Quaternion.fromVector({vector});const rotationQuaterion=_quaternion.Quaternion.fromAngleAndDirection({angle,direction});({vector}=rotationQuaterion.multiply(vectorQuaterion));[this.x,this.y,this.z]=vector}angleBetweenPoint(point){validate({point,Point});const angle=(0,_math.acos)((0,_math.divide)((0,_math.dot)(this,point),(0,_math.multiply)((0,_math.norm)(this),(0,_math.norm)(point))));return new _angle.Angle(angle)}toVector(){return new _vector.Vector([this.x,this.y,this.z])}}exports.Point=Point;