"use strict";exports.__esModule=true;exports.Faces=void 0;var _math=require("../utils/math");var _face=require("./face");var _triangulator=require("./utils/triangulator");var _mesh=require("../mesh/mesh");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Faces");class Faces extends Array{constructor(faces,mesh=null){validate({mesh,Mesh:_mesh.Mesh});for(const i in faces){const face=faces[i];if(face.length==3){faces.splice(i,1,new _face.Face(face,mesh));continue}const{splitFaces}=new _triangulator.Triangulator({indices:face,vertices:face.map(vertex=>mesh.vertices[vertex])});faces.splice(i,1,splitFaces.map(face=>new _face.Face(face,mesh)))}faces=faces.flat();super(...faces);this.mesh=mesh}static get[Symbol.species](){return Array}get area(){const value=this.reduce((sum,{area})=>(0,_math.add)(sum,area),0);return(0,_math.toMeters)(value)}}exports.Faces=Faces;