{"version":3,"sources":["../../src/shape/vertices.js"],"names":["validate","Validator","Vertices","Array","constructor","vertices","mesh","map","vertex","Vertex","Symbol","species","computeNormals","normals","length","fill","face","faces","index","normal","i","updateNormal"],"mappings":"6DACA,qCAGA,gCAGA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,UAAd,CAArB,CAGO,KAAMC,CAAAA,QAAN,QAAuBC,CAAAA,KAAM,CAGlCC,WAAW,CAACC,QAAD,CAAWC,IAAI,CAAG,IAAlB,CAAwB,CAGjCN,QAAQ,CAAC,CAAEM,IAAF,CAAD,CAAW,MAAX,CAAR,CAGAD,QAAQ,CAAGA,QAAQ,CAACE,GAAT,CAAaC,MAAM,EAAI,GAAIC,eAAJ,CAAWD,MAAX,CAAmBF,IAAnB,CAAvB,CAAX,CAGA,MAAM,GAAGD,QAAT,EAGA,KAAKC,IAAL,CAAYA,IACb,CAGD,WAAYI,MAAM,CAACC,OAAnB,GAA8B,CAC5B,MAAOR,CAAAA,KACR,CAGDS,cAAc,EAAG,CAGf,KAAMC,CAAAA,OAAO,CAAG,GAAIV,CAAAA,KAAJ,CAAU,KAAKW,MAAf,EAAuBC,IAAvB,CAA4B,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAA5B,CAAhB,CAGA,IAAK,KAAMC,CAAAA,IAAX,GAAmB,MAAKV,IAAL,CAAUW,KAA7B,CAAoC,CAGlCD,IAAI,CAACT,GAAL,CAASW,KAAK,EAAIL,OAAO,CAACK,KAAD,CAAP,CAAiB,cAAIL,OAAO,CAACK,KAAD,CAAX,CAAoBF,IAAI,CAACG,MAAzB,CAAnC,CACD,CAGD,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKN,MAAzB,CAAiCM,CAAC,EAAlC,CAAsC,CAGpC,KAAKA,CAAL,EAAQC,YAAR,CAAqB,eAAKR,OAAO,CAACO,CAAD,CAAZ,CAArB,CACD,CACF,CA1CiC,C","sourcesContent":["// Import the required math function\nimport { add, unit } from '@oneisland/math';\n\n// Import the required shape modules\nimport { Vertex } from 'shape/vertex';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Vertices');\n\n// Define a class for a group of Face classes\nexport class Vertices extends Array {\n\n  // Define the constructor\n  constructor(vertices, mesh = null) {\n\n    // Throw an error if the mesh in not a Mesh\n    validate({ mesh }, 'Mesh');\n\n    // Map each of the vertices to a Vertex\n    vertices = vertices.map(vertex => new Vertex(vertex, mesh));\n    \n    // Bind the array of vertices to the class\n    super(...vertices);\n\n    // Define the reference to the mesh\n    this.mesh = mesh;\n  }\n\n  // Define the species to be an array\n  static get [Symbol.species]() {\n    return Array; \n  }\n\n  // Compute the vertex normals from the face normals\n  computeNormals() {\n\n    // Create an empty list of normals and fill with 0, 0, 0\n    const normals = new Array(this.length).fill([0, 0, 0]);\n\n    // Iterate through each of the faces in the mesh\n    for (const face of this.mesh.faces) {\n\n      // Add the face normal to the vertex normal\n      face.map(index => normals[index] = add(normals[index], face.normal));\n    }\n    \n    // Iterate through each of the vertices\n    for (let i = 0; i < this.length; i++) {\n\n      // Add the normal to the vertex\n      this[i].updateNormal(unit(normals[i]));\n    }\n  }\n}"],"file":"vertices.js"}