{"version":3,"sources":["../../src/shape/faces.js"],"names":["validate","Validator","Faces","Array","constructor","faces","mesh","face","length","push","Face","Error","Symbol","species","area","value","reduce","sum","Number","computeNormals","Facewinder","toString","JSON","stringify"],"mappings":"0DACA,qCAGA,4BAGA,+CAMA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,OAAd,CAArB,CAGO,KAAMC,CAAAA,KAAN,QAAoBC,CAAAA,KAAM,CAG/BC,WAAW,CAACC,KAAD,CAAQC,IAAI,CAAG,IAAf,CAAqB,CAG9BN,QAAQ,CAAC,CAAEM,IAAF,CAAD,CAAW,MAAX,CAAR,CAGA,IAAK,KAAMC,CAAAA,IAAX,GAAmBF,CAAAA,KAAnB,CAA0B,CAGxB,GAAIE,IAAI,CAACC,MAAL,EAAe,CAAnB,CAAsB,CAGpBF,IAAI,CAACD,KAAL,CAAWI,IAAX,CAAgB,GAAIC,WAAJ,CAASH,IAAT,CAAeD,IAAf,CAAhB,CAGD,CAND,IAMO,CAGL,KAAM,IAAIK,CAAAA,KAAJ,CAAU,gFAAV,CAOP,CACF,CAGD,MAAM,GAAGL,IAAI,CAACD,KAAd,EAGA,KAAKC,IAAL,CAAYA,IACb,CAGD,WAAYM,MAAM,CAACC,OAAnB,GAA8B,CAC5B,MAAOV,CAAAA,KACR,CAGD,GAAIW,CAAAA,IAAJ,EAAW,CAGT,KAAMC,CAAAA,KAAK,CAAG,KAAKC,MAAL,CAAY,CAACC,GAAD,CAAM,CAAEH,IAAF,CAAN,GAAmB,cAAIG,GAAJ,CAASC,MAAM,CAACJ,IAAD,CAAf,CAA/B,CAAuD,CAAvD,CAAd,CAGA,MAAO,mBAASC,KAAT,CACR,CAGDI,cAAc,EAAG,CAGf,GAAIC,uBAAJ,CAAe,KAAKd,IAApB,CACD,CAGDe,QAAQ,EAAG,CAGT,MAAOC,CAAAA,IAAI,CAACC,SAAL,CAAe,IAAf,CACR,CAjE8B,C","sourcesContent":["// Import the required math functions\nimport { add, toMeters } from '@oneisland/math';\n\n// Import the required shape modules\nimport { Face } from 'shape/face';\n\n// Import the required utilities\nimport { Facewinder } from 'utils/facewinder';\n\n// Import the triangulator utility\n// import { Triangulator } from '@oneisland/triangulator';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Faces');\n\n// Define a class for a group of Face classes\nexport class Faces extends Array {\n\n  // Define the constructor\n  constructor(faces, mesh = null) {\n\n    // Throw an error if the mesh in not a Mesh\n    validate({ mesh }, 'Mesh');\n\n    // Iterate through each of the faces\n    for (const face of faces) {\n\n      // Check if the face has three points\n      if (face.length == 3) {\n        \n        // Map the current face to a Face and push to the triangulated faces\n        mesh.faces.push(new Face(face, mesh));\n      \n      // Throw an error as triangulation isn't yet supported\n      } else {\n\n        // Throw an error\n        throw new Error('Face triangulation is not yet supported - faces must only contain three points');\n\n        // // Triangulate the current face\n        // const triangulator = new Triangulator(face, mesh);\n\n        // // Map the triangulated faces to Faces and push them to the triangulated faces\n        // triangulator.addToMesh(mesh);\n      }\n    }\n\n    // Bind the triangulated faces to the class\n    super(...mesh.faces);\n\n    // Define the reference to the mesh\n    this.mesh = mesh;\n  }\n\n  // Define the species to be an array\n  static get [Symbol.species]() {\n    return Array; \n  }\n\n  // Calculate the sum of area in the faces\n  get area() {\n\n    // Calculate the sum of face area\n    const value = this.reduce((sum, { area }) => add(sum, Number(area)), 0);\n\n    // Return as a unit in meters\n    return toMeters(value);\n  }\n\n  // Compute the correct face normals\n  computeNormals() {\n\n    // Perform facewinding to ensure the faces normals point outwards\n    new Facewinder(this.mesh);\n  }\n\n  // Cast the faces to a string\n  toString() {\n\n    // Return the stringified faces\n    return JSON.stringify(this);\n  }\n}"],"file":"faces.js"}