{"version":3,"sources":["../../src/geometry/point.js"],"names":["validate","Validator","Point","Vector","constructor","x","y","z","species","Symbol","Array","angleBetweenPoint","point","angle","Angle","projectToPlane","plane","distance","normal","projected","toVector"],"mappings":"0DACA,qCAGA,gCACA,8BAGA,oCACA,4CACA,8CAGA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,OAAd,CAArB,CAGO,KAAMC,CAAAA,KAAN,QAAoBC,eAAO,CAGhCC,WAAW,CAAC,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAD,CAAY,CAGrBP,QAAQ,CAAC,CAAEK,CAAF,CAAKC,CAAL,CAAQC,CAAR,CAAD,CAAc,QAAd,CAAR,CAIA,MAAM,CAACF,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAN,CACD,CAGD,GAAIC,CAAAA,OAAJ,EAAc,CAGZ,MAAO,OACR,CAGD,WAAYC,MAAM,CAACD,OAAnB,GAA8B,CAC5B,MAAOE,CAAAA,KACR,CA4BDC,iBAAiB,CAACC,KAAD,CAAQ,CAGvBZ,QAAQ,CAAC,CAAEY,KAAF,CAAD,CAAY,OAAZ,CAAR,CAGA,KAAMC,CAAAA,KAAK,CAAG,eAAK,iBAAO,cAAI,CAAC,KAAKR,CAAN,CAAS,KAAKC,CAAd,CAAiB,KAAKC,CAAtB,CAAJ,CAA8BK,KAA9B,CAAP,CAA6C,mBAAS,eAAK,CAAC,KAAKP,CAAN,CAAS,KAAKC,CAAd,CAAiB,KAAKC,CAAtB,CAAL,CAAT,CAAyC,eAAKK,KAAL,CAAzC,CAA7C,CAAL,CAAd,CAGA,MAAO,IAAIE,aAAJ,CAAUD,KAAV,CACR,CAGDE,cAAc,CAACC,KAAD,CAAQ,CAGpBhB,QAAQ,CAAC,CAAEgB,KAAF,CAAD,CAAY,OAAZ,CAAR,CAGA,KAAMC,CAAAA,QAAQ,CAAG,cAAID,KAAK,CAACE,MAAV,CAAkB,CAAC,KAAKb,CAAN,CAAS,KAAKC,CAAd,CAAiB,KAAKC,CAAtB,CAAlB,CAAjB,CAGA,KAAMY,CAAAA,SAAS,CAAG,mBAAS,CAAC,KAAKd,CAAN,CAAS,KAAKC,CAAd,CAAiB,KAAKC,CAAtB,CAAT,CAAmC,mBAASU,QAAT,CAAmBD,KAAK,CAACE,MAAzB,CAAnC,CAAlB,CAGA,MAAO,IAAIhB,CAAAA,KAAJ,CAAUiB,SAAV,CACR,CAGDC,QAAQ,EAAG,CAGT,MAAO,IAAIjB,eAAJ,CAAW,CAAC,KAAKE,CAAN,CAAS,KAAKC,CAAd,CAAiB,KAAKC,CAAtB,CAAX,CACR,CApF+B,C","sourcesContent":["// Import the required math functions\nimport { acos, divide, dot, multiply, norm, subtract } from '@oneisland/math';\n\n// Import the required geometry modules\nimport { Vector } from 'geometry/vector';\nimport { Plane } from 'geometry/plane';\n\n// Import the required geometry utiliites\nimport { Angle } from 'geometry/utils/angle';\nimport { Direction } from 'geometry/utils/direction';\nimport { Quaternion } from 'geometry/utils/quaternion';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Point');\n\n// Define a class Point which defines a vector within space\nexport class Point extends Vector {\n\n  // Bind the x, y and z coordinates\n  constructor([x, y, z]) {\n\n    // Throw an error if the x, y or z value is not a Number\n    validate({ x, y, z }, 'Number');\n  \n\n    // Call the super function to bind our coodinates to the array\n    super([x, y, z]);\n  }\n\n  // Define the species\n  get species() {\n    \n    // Define the species as 'Point'\n    return 'Point';\n  }\n\n  // Define the species to be an array\n  static get [Symbol.species]() {\n    return Array; \n  }\n\n  // // Rotate the point by an angle and direction\n  // rotate({ angle, direction }) {\n\n  //   // Throw an error if the angle is not an Angle\n  //   validate({ angle }, 'Angle');\n\n  //   // Throw an error if the direction is not a Direction\n  //   validate({ direction }, 'Direction');\n\n  //   // Cast the current point into a vector\n  //   let vector = this.toVector();\n\n  //   // Create a quaternion from the vector\n  //   const vectorQuaterion = Quaternion.fromVector({ vector });\n\n  //   // Create a Quaternion from the angle and direction\n  //   const rotationQuaterion = Quaternion.fromAngleAndDirection({ angle, direction });\n\n  //   // Rotate the vector\n  //   ({ vector } = rotationQuaterion.multiply(vectorQuaterion));\n\n  //   // Update the vector with the rotated vector\n  //   [this.x, this.y, this.z] = vector;\n  // }\n\n  // Calculate the angle between two points\n  angleBetweenPoint(point) {\n\n    // Throw an error if point is not a Point\n    validate({ point }, 'Point');\n\n    // Calculate the angle between the points\n    const angle = acos(divide(dot([this.x, this.y, this.z], point), multiply(norm([this.x, this.y, this.z]), norm(point))));\n\n    // Return the angle betwen the points\n    return new Angle(angle);\n  }\n\n  // Project a point onto a given plane\n  projectToPlane(plane) {\n\n    // Throw an error if plane is not a Plane\n    validate({ plane }, 'Plane');\n\n    // Find the distance the between the point and the plane\n    const distance = dot(plane.normal, [this.x, this.y, this.z]);\n\n    // Calculate the projected point\n    const projected = subtract([this.x, this.y, this.z], multiply(distance, plane.normal));\n\n    // Return the projected Point\n    return new Point(projected);\n  }\n\n  // Cast the point to a Vector\n  toVector() {\n\n    // Return a new Vector\n    return new Vector([this.x, this.y, this.z]);\n  }\n}"],"file":"point.js"}