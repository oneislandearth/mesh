"use strict";exports.__esModule=true;exports.Validator=exports.isInstanceOf=void 0;var _math=require("./math");const isInstanceOf=({variable,type})=>variable&&type&&variable instanceof type;exports.isInstanceOf=isInstanceOf;class Validator{constructor(name){const validate=options=>{const[variable,type]=Object.keys(options).filter(key=>key!="expects"&&key!="equals");let caller="";const regex=/([^(]+)@|at ([^(]+) \(/igms;const matches=[...String(new Error().stack).matchAll(regex)];for(const i in matches){if(i==0)continue;caller=matches[i][2]||matches[i][3];if(caller.indexOf("Function")==0)caller=caller.replace("Function",name);break}let passed=false;if(!type){const value=Object.values(options)[0];passed=value!==null&&value!=false;if(options.equals&&passed){passed=options.equals(value)}}else if(type.toLowerCase()=="number"){passed=(0,_math.isNumber)(Object.values(options)[0])}else{const[variable,type]=Object.values(options);passed=isInstanceOf({variable,type})}if(!passed){const expectation=options.expects?options.expects:options.equals?`"${variable}" a valid option`:`"${variable}" to be a ${type}`;const message=`${caller} expects ${expectation}`;throw new TypeError(message)}};return{validate}}}exports.Validator=Validator;