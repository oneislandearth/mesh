{"version":3,"sources":["../../src/utils/facewinder.js"],"names":["Facewinder","constructor","mesh","windings","Array","faces","length","index","face","updateFaceWinding","volume","reverse","indices","update","updateAdjacentFaceWinding","adjacentFaces","i","adjacentIndex","i0","i1","edges","i2"],"mappings":"+DACO,KAAMA,CAAAA,UAAW,CAEtBC,WAAW,CAACC,IAAD,CAAO,CAGhB,KAAKA,IAAL,CAAYA,IAAZ,CAGA,KAAKC,QAAL,CAAgB,GAAIC,CAAAA,KAAJ,CAAU,KAAKF,IAAL,CAAUG,KAAV,CAAgBC,MAA1B,CAAhB,CAGA,KAAMC,CAAAA,KAAK,CAAG,CAAd,CAGA,KAAMC,CAAAA,IAAI,CAAG,KAAKN,IAAL,CAAUG,KAAV,CAAgBE,KAAhB,CAAb,CAGA,KAAKE,iBAAL,CAAuBF,KAAvB,CAA8BC,IAA9B,EAGA,GAAI,KAAKN,IAAL,CAAUQ,MAAV,CAAmB,CAAvB,CAA0B,CAGxB,KAAKP,QAAL,CAAgB,GAAIC,CAAAA,KAAJ,CAAU,KAAKF,IAAL,CAAUG,KAAV,CAAgBC,MAA1B,CAAhB,CAGAE,IAAI,CAACG,OAAL,GAGA,KAAKF,iBAAL,CAAuBF,KAAvB,CAA8BC,IAA9B,CACD,CACF,CAGDC,iBAAiB,CAACF,KAAD,CAAQK,OAAR,CAAiB,CAGhC,GAAI,KAAKT,QAAL,CAAcI,KAAd,CAAJ,CAA0B,OAG1B,KAAKL,IAAL,CAAUG,KAAV,CAAgBE,KAAhB,EAAuBM,MAAvB,CAA8BD,OAA9B,EAGA,KAAKT,QAAL,CAAcI,KAAd,EAAuB,IAAvB,CAGA,KAAKO,yBAAL,CAA+BP,KAA/B,CACD,CAGDO,yBAAyB,CAACP,KAAD,CAAQ,CAG/B,KAAMC,CAAAA,IAAI,CAAG,KAAKN,IAAL,CAAUG,KAAV,CAAgBE,KAAhB,CAAb,CAGA,KAAMQ,CAAAA,aAAa,CAAGP,IAAI,CAACO,aAA3B,CAGA,IAAK,KAAMC,CAAAA,CAAX,GAAgBD,CAAAA,aAAhB,CAA+B,CAG7B,GAAI,CAACA,aAAa,CAACC,CAAD,CAAlB,CAAuB,SAGvB,KAAMC,CAAAA,aAAa,CAAGF,aAAa,CAACC,CAAD,CAAb,CAAiBT,KAAvC,CAGA,GAAI,KAAKJ,QAAL,CAAcc,aAAd,CAAJ,CAAkC,SAGlC,KAAM,CAACC,EAAD,CAAKC,EAAL,EAAWX,IAAI,CAACY,KAAL,CAAWJ,CAAX,CAAjB,CAGA,IAAK,KAAMK,CAAAA,EAAX,GAAiBN,CAAAA,aAAa,CAACC,CAAD,CAA9B,CAAmC,CAGjC,GAAIE,EAAE,EAAIG,EAAN,EAAYF,EAAE,EAAIE,EAAtB,CAA0B,CAGxB,KAAKZ,iBAAL,CAAuBQ,aAAvB,CAAsC,CAACE,EAAD,CAAKD,EAAL,CAASG,EAAT,CAAtC,CACD,CACF,CACF,CACF,CApFqB,C","sourcesContent":["// Reordered the face indices permutation such that the winding is the same for all faces\nexport class Facewinder {\n\n  constructor(mesh) {\n\n    // Bind all of the faces\n    this.mesh = mesh;\n\n    // Holds a list of the orders / windings for each face\n    this.windings = new Array(this.mesh.faces.length);\n\n    // Define the current index\n    const index = 0;\n\n    // Define the current face\n    const face = this.mesh.faces[index];\n\n    // Update the face winding for the first face\n    this.updateFaceWinding(index, face);\n\n    // Check if the direction of the face is pointing inwards\n    if (this.mesh.volume < 0) {\n\n      // Reset the list of list of the orders / windings for each face\n      this.windings = new Array(this.mesh.faces.length);\n\n      // Flip the direction of the face to point outwards\n      face.reverse();\n\n      // Update the face winding for the first face\n      this.updateFaceWinding(index, face);\n    }\n  }\n\n  // Update the face winding on the face\n  updateFaceWinding(index, indices) {\n\n    // Return if the face is already would\n    if (this.windings[index]) return;\n\n    // Reorder the face\n    this.mesh.faces[index].update(indices);\n\n    // Update the winding flag for the face\n    this.windings[index] = true;\n\n    // Order the faces adjacent to the faces\n    this.updateAdjacentFaceWinding(index);\n  }\n\n  // Update the face winding on the adjacent faces\n  updateAdjacentFaceWinding(index) {\n\n    // Extract the current face\n    const face = this.mesh.faces[index];\n\n    // Extract the adjacent faces\n    const adjacentFaces = face.adjacentFaces;\n\n    // Iterate through the adjacent face\n    for (const i in adjacentFaces) {\n\n      // Skip to the next face if there is no adjacent face\n      if (!adjacentFaces[i]) continue;\n\n      // Find the index of the adjacent face\n      const adjacentIndex = adjacentFaces[i].index;\n\n      // Skip to the next face if the face has been ordered / wound\n      if (this.windings[adjacentIndex]) continue;\n\n      // Extract the edge fro the current face\n      const [i0, i1] = face.edges[i];\n\n      // Iterate through each of the indices on the adjacent face\n      for (const i2 of adjacentFaces[i]) {\n\n        // Find the indices which is not part of the edge\n        if (i0 != i2 && i1 != i2) {\n\n          // Update the winding order for the adjacent face\n          this.updateFaceWinding(adjacentIndex, [i1, i0, i2]);\n        }\n      }\n    }\n  }\n}"],"file":"facewinder.js"}