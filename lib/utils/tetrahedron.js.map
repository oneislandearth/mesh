{"version":3,"sources":["../../src/utils/tetrahedron.js"],"names":["validate","Validator","Tetrahedron","constructor","a","b","c","d","points","containsPoint","point","side","length","normal"],"mappings":"gEAEA,qCAGA,+CAGA,KAAM,CAAEA,QAAF,EAAe,GAAIC,qBAAJ,CAAc,MAAd,CAArB,CAGO,KAAMC,CAAAA,WAAY,CAGvBC,WAAW,CAAC,CAACC,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CAAD,CAAe,CAGxBP,QAAQ,CAAC,CAAEI,CAAF,CAAKC,CAAL,CAAQC,CAAR,CAAWC,CAAX,CAAD,CAAiB,CAAC,OAAD,CAAU,QAAV,CAAjB,CAAR,CAGA,KAAKC,MAAL,CAAc,CAACJ,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,CACf,CAGDE,aAAa,CAACC,KAAD,CAAQ,CAGnBV,QAAQ,CAAC,CAAEU,KAAF,CAAD,CAAY,CAAC,OAAD,CAAU,QAAV,CAAZ,CAAR,CAGA,IAAK,KAAMC,CAAAA,IAAX,GAAmB,MAAKH,MAAxB,CAAgC,CAG9B,KAAM,CAACJ,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,EAAe,CACnB,KAAKC,MAAL,CAAYG,IAAZ,CADmB,CAEnB,KAAKH,MAAL,CAAa,CAACG,IAAI,CAAG,CAAR,EAAa,KAAKH,MAAL,CAAYI,MAAtC,CAFmB,CAGnB,KAAKJ,MAAL,CAAa,CAACG,IAAI,CAAG,CAAR,EAAa,KAAKH,MAAL,CAAYI,MAAtC,CAHmB,CAInB,KAAKJ,MAAL,CAAa,CAACG,IAAI,CAAG,CAAR,EAAa,KAAKH,MAAL,CAAYI,MAAtC,CAJmB,CAArB,CAQA,KAAMC,CAAAA,MAAM,CAAG,gBAAM,mBAASR,CAAT,CAAYD,CAAZ,CAAN,CAAsB,mBAASE,CAAT,CAAYF,CAAZ,CAAtB,CAAf,CAGA,GAAI,eAAK,cAAIS,MAAJ,CAAY,mBAASN,CAAT,CAAYH,CAAZ,CAAZ,CAAL,GAAqC,eAAK,cAAIS,MAAJ,CAAY,mBAASH,KAAT,CAAgBN,CAAhB,CAAZ,CAAL,CAAzC,CAAgF,MAAO,MACxF,CAGD,MAAO,KACR,CAtCsB,C","sourcesContent":["\n// Import the required math functions\nimport { sign, dot, cross, subtract } from '@oneisland/math';\n\n// Import the validator utility\nimport { Validator } from '@oneisland/validator';\n\n// Define a validator for the class\nconst { validate } = new Validator('Edge');\n\n// Used for checking whether there is a point inside a tetrahedron\nexport class Tetrahedron {\n\n  // Create a tetrahedron from four points\n  constructor([a, b, c, d]) {\n\n    // Throw an error if a, b, c or d is not a Point or Vertex\n    validate({ a, b, c, d }, ['Point', 'Vertex']);\n\n    // Bind all of the points to the tetrahedron\n    this.points = [a, b, c, d];\n  }\n\n  // Check if the tetrahedron contains a point\n  containsPoint(point) {\n\n    // Throw an error if point is not a Point or Vertex\n    validate({ point }, ['Point', 'Vertex']);\n\n    // Check the side for each of the faces\n    for (const side in this.points) {\n\n      // Extract the points in order based on side\n      const [a, b, c, d] = [\n        this.points[side],\n        this.points[((side + 1) % this.points.length)],\n        this.points[((side + 2) % this.points.length)],\n        this.points[((side + 3) % this.points.length)]\n      ];\n\n      // Calculate the normal of the face\n      const normal = cross(subtract(b, a), subtract(c, a));\n\n      // Return false if the point is on the same side (is on the face)\n      if (sign(dot(normal, subtract(d, a))) != sign(dot(normal, subtract(point, a)))) return false;\n    }\n\n    // The point passed all the checks so must be on the same plane as the tetrahedron points and not on the face\n    return true;\n  }\n}"],"file":"tetrahedron.js"}