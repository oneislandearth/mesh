"use strict";exports.__esModule=true;exports.Vertex=void 0;var _point=require("../geometry/point");var _vector=require("../geometry/vector");var _angle=require("../geometry/utils/angle");var _direction=require("../geometry/utils/direction");var _quaternion=require("../geometry/utils/quaternion");var _mesh=require("../mesh/mesh");var _validator=require("../utils/validator");const{validate}=new _validator.Validator("Vertex");class Vertex extends _point.Point{constructor([x,y,z],mesh=null){validate({x,Number});validate({y,Number});validate({z,Number});if(mesh)validate({mesh,Mesh:_mesh.Mesh});super([x,y,z]);this.mesh=mesh}static get[Symbol.species](){return Array}rotate({angle,direction}){validate({angle,Angle:_angle.Angle});validate({direction,Direction:_direction.Direction});let vector=this.toVector();const vectorQuaterion=_quaternion.Quaternion.fromVector({vector});const rotationQuaterion=_quaternion.Quaternion.fromAngleAndDirection({angle,direction});({vector}=rotationQuaterion.multiply(vectorQuaterion));[this.x,this.y,this.z]=vector}toPoint(){return new _point.Point([this.x,this.y,this.z])}toVector(){return new _vector.Vector([this.x,this.y,this.z])}}exports.Vertex=Vertex;