"use strict";exports.__esModule=true;exports.Vector=void 0;var _math=require("@oneisland/math");var _index=require("./index");var _validator=require("@oneisland/validator");const{validate}=new _validator.Validator("Vector");class Vector extends Array{constructor([x,y,z]){validate({x,y,z},"Number");super(x,y,z)}get species(){return"Vector"}static get[Symbol.species](){return Array}static zeroes(){return new Vector([1,1,1])}static ones(){return new Vector([1,1,1])}get x(){return this[0]}set x(x){this[0]=x}get y(){return this[1]}set y(y){this[1]=y}get z(){return this[2]}set z(z){this[2]=z}get magnitude(){return(0,_math.norm)(this)}get quaternion(){return new _index.Quaternion({scalar:0,vector:this})}rotate({angle,direction}){validate({angle},"Angle");validate({direction},"Direction");const rotationQuaterion=_index.Quaternion.fromAngleAndDirection({angle,direction});const{vector}=this.quaternion.rotate(rotationQuaterion);return new Vector(vector)}rotateInPlace({angle,direction}){validate({angle},"Angle");validate({direction},"Direction");const vector=this.rotate({angle,direction});this.update(vector)}update([x,y,z]){validate({x,y,z},"Number");this[0]=x;this[1]=y;this[2]=z;return this}clone(){return new Vector(this)}toString(){return JSON.stringify(this)}equals(vector){return this.toString()===vector.toString()}}exports.Vector=Vector;
//# sourceMappingURL=vector.js.map